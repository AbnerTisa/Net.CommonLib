/*******************************************************************
 * * 文件名：
 * * 文件作用：
 * *-------------------------------------------------------------------
 * * 修改历史记录：
 * * 修改时间      修改人    修改内容概要
 * * 2013-02-23    xwj       新增
 * *******************************************************************/

using System;
using System.IO;
using System.Text;

namespace Net.CommonLib.ExcelReport.License
{
    public class License
    {
        private static string licenseStr =


        public static void SetLicense()
        {
            try
            {
                byte[] bytes = ConvertStringToBytes(licenseStr);
                Stream stream = new MemoryStream(bytes);
                Spire.License.LicenseProvider.SetLicenseFileStream(stream);
            }
            catch (Exception ex)
            {
                Console.WriteLine("SetLicenseError:" + ex.Message);
            }
        }

        /// <summary>
        /// 将16进制字符串转化为字节数组
        /// </summary>
        /// <param name="strHex"></param>
        /// <returns></returns>
        public static byte[] ConvertStringToBytes(string strHex)
        {
            if (strHex == null)
            {
                return null;
            }
            if (strHex.Length < 2)
            {
                return null;
            }
            byte[] bytes = Encoding.ASCII.GetBytes(strHex);
            int num = bytes.GetLength(0) >> 1;
            byte[] buffer2 = new byte[num];
            for (int i = 0; i < (num << 1); i++)
            {
                byte num3 = 0;
                if ((bytes[i] >= 0x30) && (bytes[i] <= 0x39))
                {
                    num3 = (byte)(bytes[i] - 0x30);
                }
                else if ((bytes[i] >= 0x41) && (bytes[i] <= 70))
                {
                    num3 = (byte)((bytes[i] - 0x41) + 10);
                }
                if ((i % 2) == 0)
                {
                    buffer2[i >> 1] = (byte)(num3 << 4);
                }
                else
                {
                    buffer2[i >> 1] = (byte)(buffer2[i >> 1] + num3);
                }
            }

            return buffer2;
        }
    }
}